import{_ as c}from"./chunks/ArticleMetadata.CtBSOJVh.js";import{a2 as k,a as o,u as s,B as g,e as l,x as m,ap as F,m as i,o as n,p as u,q as y}from"./chunks/framework.DM74m2GY.js";import"./chunks/theme.DeB3itL1.js";const N=JSON.parse('{"title":"Linux系统编程","description":"","frontmatter":{"createtime":"2024/1/25","title":"Linux系统编程","outline":[2,3],"isTop":true,"categories":["笔记"],"tags":["Linux"]},"headers":[],"relativePath":"笔记/C++进阶/Linux系统编程.md","filePath":"笔记/C++进阶/Linux系统编程.md","lastUpdated":1731934995000}'),b={name:"笔记/C++进阶/Linux系统编程.md"},C=l("h1",{id:"linux系统编程",tabindex:"-1"},[m("Linux系统编程 "),l("a",{class:"header-anchor",href:"#linux系统编程","aria-label":'Permalink to "Linux系统编程"'},"​")],-1),f=F(`<h2 id="_1-开发环境搭建" tabindex="-1">1. 开发环境搭建 <a class="header-anchor" href="#_1-开发环境搭建" aria-label="Permalink to &quot;1. 开发环境搭建&quot;">​</a></h2><p>安装sshd 服务</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> openssh-server</span></span></code></pre></div><p>安装 gcc/g++/make等 工具</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>sudo apt install build-essential</span></span></code></pre></div><p>安装tree</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> tree</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lyz@lyz-virtual-machine:~/WebServer-master$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ^C</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lyz@lyz-virtual-machine:~/WebServer-master$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lyz@lyz-virtual-machine:~$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Linux</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  WebServer-master</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  公共的</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  模板</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  视频</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  图片</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  文档</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  下载</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  音乐</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  桌面</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lyz@lyz-virtual-machine:~$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Linux/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lyz@lyz-virtual-machine:~/Linux$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> test.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lyz@lyz-virtual-machine:~/Linux$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">test</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  test.c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lyz@lyz-virtual-machine:~/Linux$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  linux中，可执行文件是绿色的。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lyz@lyz-virtual-machine:~/Linux$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ./test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> World</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">lyz@lyz-virtual-machine:~/Linux$</span></span></code></pre></div><h2 id="_2-gcc" tabindex="-1">2.GCC <a class="header-anchor" href="#_2-gcc" aria-label="Permalink to &quot;2.GCC&quot;">​</a></h2><ul><li><p>GCC 原名为 GNU C语言编译器(GNUCCompiler) GCC(GNU Compiler Collection，GNU编译器套件)是由 GNU 开发的编程语言译器。GNU 编译器套件包括C、C++、Objective·C、java、Ada和 Go语言前端，也包括了这些语言的库(如 libstdc++，libgcj等)</p></li><li><p>GCC不仅支持C的许多“方言”，也可以区别不同的C语言标准;可以使用命令行选项来控制编译器在翻译源代码时应该遵循哪个C标准。例如，当使用命令行参数-std=c99 启动 GCC 时，编译器支持 C99 标准。</p></li><li><p>安装命令 sudo apt install build-essential (这里面不仅包括gcc，还有make)</p></li><li><p>查看版本 gcc/g++ -v/--version</p></li></ul><h3 id="_2-1-gcc工作流程" tabindex="-1">2.1 GCC工作流程 <a class="header-anchor" href="#_2-1-gcc工作流程" aria-label="Permalink to &quot;2.1 GCC工作流程&quot;">​</a></h3><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/ebd380ab-e7d4-4f09-89b9-4612adc4e176.png" title="" alt="ebd380ab-e7d4-4f09-89b9-4612adc4e176" style="zoom:80%;"><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/9e7a3fdd-900e-4a22-836c-7a133d115248.png" title="" alt="9e7a3fdd-900e-4a22-836c-7a133d115248" style="zoom:80%;"><table><thead><tr><th>预处理</th><th>它会把 .h 头文件的内容，原封不动的拷贝到 .cpp里面。<br>如果定义了宏，就会在.cpp中替换成宏值。</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><img title="" src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/23a17251-8f81-4230-b17d-9b95cc42135f.png" alt="23a17251-8f81-4230-b17d-9b95cc42135f" style="zoom:80%;"><img title="" src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/62856142-1896-4a6d-b96c-e01d153c5fea.png" alt="62856142-1896-4a6d-b96c-e01d153c5fea" data-align="inline" style="zoom:80%;"><p>使用 方言c++14</p><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/247f3a57-b8d7-4799-842b-73a7e6184eb7.png" title="" alt="247f3a57-b8d7-4799-842b-73a7e6184eb7" style="zoom:80%;"><h2 id="_3-makefile" tabindex="-1">3. Makefile <a class="header-anchor" href="#_3-makefile" aria-label="Permalink to &quot;3. Makefile&quot;">​</a></h2><h3 id="_3-1-简介" tabindex="-1">3.1 简介 <a class="header-anchor" href="#_3-1-简介" aria-label="Permalink to &quot;3.1 简介&quot;">​</a></h3><p>一个工程中的源文件不计其数，其按类型、功能、模块分别放在若干个目录中，Makefile 文件定义了一系列的规则来指定哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 Makefile 文件就像一个 Shell 脚本一样，也可以执行操作系统的命令。</p><p>Makefile 带来的好处就是”自动化编译”，一旦写好，只需要一个 make 命令，整个工程完全自动编译，极大的提高了软件开发的效率。make 是一个命令工具，是一个解释 Makefile 文件中指令的命令工具，一般来说，大多数的 IDE 都有这个命令，比如 Delphi的 make,Visual C++的 nmake,Linux下 GNU 的 make。</p><h3 id="_3-2-makefile-文件命名和规则" tabindex="-1">3.2 Makefile 文件命名和规则 <a class="header-anchor" href="#_3-2-makefile-文件命名和规则" aria-label="Permalink to &quot;3.2 Makefile 文件命名和规则&quot;">​</a></h3><p>1.文件命名:makefile 或者 Makefile 2.Makefile 规则:一个 Makefile 文件中可以有一个或者多个规则</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">目标...:依赖...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    命令（shell</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> 命令）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    ...</span></span></code></pre></div><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/691419f1-1498-462d-a3d5-0a427e3cb192.png" title="" alt="691419f1-1498-462d-a3d5-0a427e3cb192" style="zoom:80%;"><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/11478d4f-ae2b-4460-bd22-2f7915312782.png" title="" alt="11478d4f-ae2b-4460-bd22-2f7915312782" style="zoom:75%;"><p><strong>真实的Makefile：</strong> 目标是all，不会生成具体的文件。然后命令是创建一个bin目录，进入到build，目录下执行make，&amp;&amp;如果前面执行成功后面make执行，否则make不会执行。</p><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/d20fd3ef-afdd-4a7e-8651-57229d4d633d.png" title="" alt="d20fd3ef-afdd-4a7e-8651-57229d4d633d" style="zoom:80%;"><img title="" src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/33f44bec-e81b-40d4-940e-3fc1d0ae699f.png" alt="33f44bec-e81b-40d4-940e-3fc1d0ae699f" style="zoom:60%;"><blockquote><p>定义一个变量，值是g++，CFLAGS变量， -02优化的级别，大写o。-wall开启所有的警告级别，-g开启调试。</p><p>TARGET目标，生成server，OBJS，生成目标的依赖。</p><p>all，就是大的目标，获取所有的依赖，编译cpp的代码，一般用g++的命令， -o生成目标文件。</p><p>-pthread使用线程库。-lmysqlclient，<code>-l</code>是使用库，这里使用mysqlclient客户端的库（静态库，动态库）。</p><p>cleam，清理文件</p></blockquote><p>目标：最终要生成的文件(伪目标除外)</p><p>依赖：生成目标所需要的文件或是目标</p><p>命令：通过执行命令对依赖操作生成目标(命令前必须Tab 缩进)</p><p>Makefile 中的其它规则一般都是为第一条规则服务的。</p><h3 id="_3-3基本原理" tabindex="-1">3.3基本原理 <a class="header-anchor" href="#_3-3基本原理" aria-label="Permalink to &quot;3.3基本原理&quot;">​</a></h3><ol><li><p>命令在执行之前，需要先检查规则中的依赖是否存在  a. 如果存在，执行命令 b. 如果不存在，向下检查其它的规则，检查有没有一个规则是用来生成这个依赖的，如果找到了，则执行该规则中的命令</p></li><li><p>检测更新，在执行规则中的命令时，会比较目标和依赖文件的时间。 a. 如果依赖的时间比目标的时间晚，需要重新生成目标。 b. 如果依赖的时间比目标的时间早，目标不需要更新，对应规则中的命令不需要被执行。</p></li><li><p><code>就是说，如果没有更新内容的项目，他第二次部署就不会更新，</code></p></li></ol>`,37);function _(a,D,v,z,x,G){const p=c,h=i("ClientOnly"),d=i("NolebaseGitContributors"),r=i("NolebaseGitChangelog");return n(),o("div",null,[C,s(h,null,{default:g(()=>{var e,t;return[(((e=a.$frontmatter)==null?void 0:e.aside)??!0)&&(((t=a.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(n(),u(p,{key:0,article:a.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),f,s(d),s(r)])}const $=k(b,[["render",_]]);export{N as __pageData,$ as default};
