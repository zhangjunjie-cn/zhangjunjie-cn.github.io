import{_ as b}from"./chunks/Timeline.DVrXOlEy.js";import{_ as D}from"./chunks/ArticleMetadata.DgR8U6Jn.js";import{a0 as g,G as v,H as a,c as o,M as s,L as d,an as l,E as t,A as p,B as f,I as O}from"./chunks/framework.CqMsGXHl.js";import"./chunks/index.DGa7NFfM.js";import"./chunks/theme.DQ275vR9.js";const F=JSON.parse('{"title":"开发环境搭建","description":"","frontmatter":{"title":"开发环境搭建","author":"张俊杰","date":"2020/10/02 21:29","categories":["Java基础快速入门"],"tags":["Java","Java基础","JDK","开发环境"]},"headers":[],"relativePath":"courses/java/01-Java语法入门/01-开发环境搭建.md","filePath":"courses/java/01-Java语法入门/01-开发环境搭建.md","lastUpdated":1741574836000}'),K={name:"courses/java/01-Java语法入门/01-开发环境搭建.md"};function q(i,e,x,A,S,j){const u=D,h=t("ClientOnly"),m=b,n=t("VPNolebaseInlineLinkPreview"),J=t("NolebaseGitContributors"),k=t("NolebaseGitChangelog");return p(),v("div",null,[e[18]||(e[18]=a("h1",{id:"开发环境搭建",tabindex:"-1"},[o("开发环境搭建 "),a("a",{class:"header-anchor",href:"#开发环境搭建","aria-label":'Permalink to "开发环境搭建"'},"​")],-1)),s(h,null,{default:d(()=>{var c,r;return[(((c=i.$frontmatter)==null?void 0:c.aside)??!0)&&(((r=i.$frontmatter)==null?void 0:r.showArticleMetadata)??!0)?(p(),f(u,{key:0,article:i.$frontmatter},null,8,["article"])):O("",!0)]}),_:1}),e[19]||(e[19]=a("h2",{id:"前言",tabindex:"-1"},[o("前言 "),a("a",{class:"header-anchor",href:"#前言","aria-label":'Permalink to "前言"'},"​")],-1)),s(m,null,{default:d(()=>e[0]||(e[0]=[o(" - 12-06 周六下午，提车 - 12-11 周三晚上和同学叙旧 - 12-12 加入Tailwindcss ")])),_:1}),e[20]||(e[20]=l(`<p><strong>C：</strong> 上篇的介绍是否能让你对 Java 语言有一个初步的认识呢？认识完后，大家可能着急想上手编程了吧？但就像你要去游泳，也得先找到一个泳池？所以还是先耐下性子，听笔者说，在正式开发一个 Java 程序前，我们首先应该在计算机中，准备好对应的开发环境，Java 语言所需要的开发环境是 JDK / JRE。</p><p>这是万里长征的第一步，搭好 Java 基础开发环境是 Java 系开发者必须掌握的技能，所以笔者建议你，收藏好本篇教程，JDK 多安装个几遍，它又不是流氓软件，不影响（卸载不残留，重装如新装）。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes one-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#ADBAC7;"> PtjsTheme</span><span style="--shiki-light:#A626A4;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#96D0FF;"> &#39;@project-trans/vitepress-theme-project-trans/theme&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#96D0FF;"> &#39;uno.css&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#96D0FF;"> &#39;./style.css&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#F69D50;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#ADBAC7;">  extends</span><span style="--shiki-light:#0184BC;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#ADBAC7;"> PtjsTheme</span><span style="--shiki-light:#383A42;--shiki-dark:#F69D50;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F69D50;">  首先我们介绍一下我们要安装的 JDK / JRE 的概念。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#F69D50;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="grid grid-cols-2 rounded border border-gray-400 border-opacity-50 px-10 pb-4"><div><h3>左</h3> 这会在左边显示 <p>这会在左边显示</p></div><div><h3>右</h3><p>这会在右边显示</p></div></div><figure><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/202405261607705.png" alt="你好" tabindex="0"><figcaption>你好</figcaption></figure><figure><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/202501052142179.png" alt="滇池内海[大图]" tabindex="0"><figcaption>滇池内海[大图]</figcaption></figure><figure><img src="https://e-assets.gitee.com/gitee-community-web/_next/static/media/person.9b9c6c64.png!/quality/100" alt="tu1" tabindex="0"><figcaption>tu1</figcaption></figure><figure><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/202405261607705.png" alt="tu1" tabindex="0"><figcaption>tu1</figcaption></figure><h2 id="jdk和jre的概念" tabindex="-1">JDK和JRE的概念 <a class="header-anchor" href="#jdk和jre的概念" aria-label="Permalink to &quot;JDK和JRE的概念&quot;">​</a></h2><p>首先我们介绍一下我们要安装的 JDK / JRE 的概念。</p><p><code>JDK</code> 的全称是 <code>Java Development Kit</code>，即 Java 开发工具包，是 Sun 公司提供的一套用于开发 Java 应用程序的开发包，它提供了编译、运行 Java 程序所需的各种工具和资源，包括 Java 编译器、Java 运行时环境（<code>JRE</code>），以及常用的 Java类库 等。</p><p><code>JRE</code>，全称 <code>Java Runtime Environment</code> ，Java 运行时环境。它是运行 Java 程序的必须条件。如果只是运行Java 程序，可以只安装 <code>JRE</code>，无需安装 <code>JDK</code>。</p><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p>在业内，一般都是直接安装 <code>JDK</code>，因为 <code>JDK</code> 内置了一个 <code>JRE</code>，我们亦是如此。</p></div><h2 id="jdk的选择" tabindex="-1">JDK的选择 <a class="header-anchor" href="#jdk的选择" aria-label="Permalink to &quot;JDK的选择&quot;">​</a></h2><h3 id="选择谁家的" tabindex="-1">选择谁家的？ <a class="header-anchor" href="#选择谁家的" aria-label="Permalink to &quot;选择谁家的？&quot;">​</a></h3>`,15)),a("p",null,[e[2]||(e[2]=o("了解完 ")),e[3]||(e[3]=a("code",null,"JDK",-1)),e[4]||(e[4]=o(" 概念之后，我们还要了解下目前 ")),e[5]||(e[5]=a("code",null,"JDK",-1)),e[6]||(e[6]=o(" 的现状。Sun 公司当初开发了 Java 语言，作为 Java 语言的开发工具包， ")),e[7]||(e[7]=a("code",null,"JDK",-1)),e[8]||(e[8]=o(" 在发展中被 Sun 公司分化为了两大分支。（ 可延伸阅读 ")),s(n,{href:"https://www.51cto.com/specbook/11/35089.htm",target:"_blank",rel:"noreferrer"},{default:d(()=>e[1]||(e[1]=[o("Java 终于开源了，采用GPLv2授权协议")])),_:1}),e[9]||(e[9]=o(" ）"))]),e[21]||(e[21]=l('<ul><li><code>Open JDK</code> ，开源（源代码公开）版本，以 GPL V2（General Public License）协议的形式开源</li><li><code>Sun JDK</code> ，使用 JRL（Java Research License，Java 研究授权协议）发布。</li></ul><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p>GPL 协议，在开源协议里被称为&quot;病毒&quot;协议，只要是基于 GPL 协议 <strong>开源</strong> 的代码来开发，那么这项目也必须开源。</p><p>JRL 协议，是 Sun 公司自己搞出来的协议，理解起来就是 Sun 公司公开代码，但是代码的所有权完全归它自己所有，你们能看。</p><p>不过上述协议对我们使用 JDK 没有什么影响，它影响的是那些想改动 JDK 或基于 JDK 代码二次开发的个人或公司群体，我们又不动 JDK 代码。</p></div><p>其实两个分支版本，在发展中有很大部分的相同代码，不过<code>Open JDK</code>不如 <code>Sun JDK</code> 完整是肯定的(缺少一些特性API)，且一部分代码由于产权等原因无法授权给 <code>Open JDK</code> 使用，便在 <code>Open JDK</code> 中替换为没有产权问题的代码。</p><p>很多大公司为了避免版权问题，都在使用基于 <code>Open JDK</code> 开发或自主开发的 JDK 版本，例如亚马逊的 Corretto、阿里巴巴的 Dragonwell、华为的毕昇、腾讯的 Kona等（咱们国内今年井喷式开源 JDK）。</p><p>另外我们都知道，Sun （升阳公司）在2009年被 Oracle（甲骨文公司）收购了，Java 相关业务及版权也就归Oracle 所有。后续的 <code>JDK</code> 更新当然也就由 Oracle 负责了，但是 Oracle 在行业内有一个&quot;不太好&quot;的名声，&quot;什么都要钱，什么都死贵&quot;（实际上，商业公司的本质就是盈利，Sun 公司当初还没做到怎么盈利就没了，Oracle 后面继续做这件事也无可厚非）。</p><p>在2009年到2019年期间，Oracle 没有做什么收费的大动作，但是这种情况在2019年1月1日出现了点变化。Oracle 宣布从2019年1月1日起，<code>Oracle JDK 8</code> 的后续更新将需要收费。<code>Oracle JDK 8</code> 的 <code>8u211</code> 和 <code>8u212</code>更新，开始把许可协议从 <code>BCL</code> 换成了 <code>OTN</code>，这就意味着，你不能在生产环境使用这类版本了。</p><div class="tip custom-block"><p class="custom-block-title">Oracle 采用的许可协议介绍</p><p>BCL协议，即Oracle Binary Code License Agreement，协议规定你可以使用JDK，但是不能进行修改(和上文的JRL类似)，私用和商用都可以，但是JDK中的某些商业特性，是需要付费才可以使用的。</p><p>OTN协议，即Oracle Technology Network License Agreement，目前新发布的JDK用的都是这个协议，可以私用，商用需要付费。[1]</p></div><p>一石激起千层浪，本来就担心的事终于发生了，很多公司更是开始进行 <code>JDK</code> 版本转移和考虑以后的选择。</p><p>下图是2020年初，Jrebel 在 Java 生态报告中，对 <code>JDK</code> 选择的调查结果（中国内也差不多，仅供参考）。根据结果表示，<code>Oracle JDK(Sun JDK)</code>和<code>Oracle Open JDK(Sun Open JDK)</code>还是占据比较大的市场地位，但<code>AdoptOpenJDK</code>的占有率也在迅速提升中。</p>',9)),a("p",null,[e[11]||(e[11]=o("我们现在学习选择用 ")),e[12]||(e[12]=a("code",null,"Oracle JDK",-1)),e[13]||(e[13]=o(" 就可以了，公司内就看公司的架构师或领导想法了。[可延伸阅读，了解更多的 ")),s(n,{href:"https://www.oschina.net/news/99836/time-to-look-beyond-oracles-jdk",target:"_blank",rel:"noreferrer"},{default:d(()=>e[10]||(e[10]=[o("JDK 发行版")])),_:1}),e[14]||(e[14]=o("]"))]),e[22]||(e[22]=l('<h2 id="jdk下载" tabindex="-1">JDK下载 <a class="header-anchor" href="#jdk下载" aria-label="Permalink to &quot;JDK下载&quot;">​</a></h2><p>既然我们选择了 <code>Oralce JDK 8</code>，那就前往Oracle官网下载吧。</p><p>1.打开下方的链接，或者自行百度搜索 <code>JDK</code>，找到类似下方页面。</p><p>Oracle 现在要求下载 <code>JDK</code> 必须先登录，没有帐号的同学，自己先注册一个吧。网络是真慢！忍忍！</p><p>在弹出的更改安装目录对话框中，只需要修改前面的盘符 <code>d:</code> 和文件夹 <code>develop</code>，后面的子文件夹 <code>Java\\jdk1.8.0_xxx\\</code> 不需要修改，然后点击确定。如果文件夹不存在，安装时会自动创建。</p><div class="danger custom-block"><p class="custom-block-title">笔者说</p><p>安装路径不要出现空格，中文，特殊符号等！</p></div><p>当我选中第三个 <code>公共JRE</code> 时，右边给出提示，这是一个独立的 <code>JRE</code>，我们可以不用安装。不过一般情况我们都选择安装，目的是为了以后如果有一些 Java 程序想单独运行，那么必须配套一个 <code>JRE</code>，到那时候就可以用上了。</p><p>等待安装。</p><p>安装完之后，我们想测试一下 <code>JDK</code> 是否安装成功，可以运行 <code>JDK</code> 安装目录下 <code>bin</code> 目录内的 <code>java.exe</code> 程序。如果你看不到 <code>.exe</code>，记得自行开启下计算机的扩展名显示。</p><p>在 <code>Windows</code> 中我们习惯双击运行程序，但是却发现 <code>java.exe</code> 双击后会弹出一个黑窗口一闪而过。这是因为这种程序，它们需要在特别的系统内运行，比如说我们的 <code>DOS</code> 系统，下面就和笔者去学一下基本的 <code>DOS</code> 使用吧。</p><h2 id="dos系统" tabindex="-1">DOS系统 <a class="header-anchor" href="#dos系统" aria-label="Permalink to &quot;DOS系统&quot;">​</a></h2><h3 id="什么是dos" tabindex="-1">什么是DOS？ <a class="header-anchor" href="#什么是dos" aria-label="Permalink to &quot;什么是DOS？&quot;">​</a></h3><p>那 <code>DOS</code> 是什么呢？它的全称是 <code>Disk Operating System</code> ，即磁盘操作系统。简单点说，你看过的电影里，黑客们是不是在计算机的一个黑窗口中&quot;运指如飞&quot;？这个所谓的黑窗口不是 <code>DOS</code> 那就是 Linux 系。</p><p>实际上 <code>DOS</code> 它就是早期主流的计算机操作系统，后来 Windows 等主打可视化的系统出现，才让计算机逐渐摆脱专业的概念，变得&quot;平民化&quot;，走入千家万家。之前之所以专业化，就是因为这个系统需要通过命令来进行计算机操作，而不能使用鼠标点来点去，所以非专业人士去背命令和习惯这使用方式，简直&quot;太难&quot;了。</p><h3 id="dos常用命令" tabindex="-1">DOS常用命令 <a class="header-anchor" href="#dos常用命令" aria-label="Permalink to &quot;DOS常用命令&quot;">​</a></h3><h4 id="查看列表" tabindex="-1">查看列表 <a class="header-anchor" href="#查看列表" aria-label="Permalink to &quot;查看列表&quot;">​</a></h4><p>在上图中，如果我们在 <code>Windows</code> 系统中进入了某个路径，可以很直观的看到当前路径下的所有文件和文件夹。那么在 <code>DOS</code> 中如何实现这一目的呢？</p><p>输入 <code>dir</code> 命令，即可列出当前所处位置的文件和文件夹列表，如下图所示。</p><p>还有一些特别的路径切换，比如返回上一级目录。在 <code>Windows</code> 系统中，鼠标点一下返回键就可以了，在 <code>DOS</code>中，可以通过 <code>cd ..</code> 命令来切换。<code>..</code>和<code>.</code> 是每个目录下都存在的两个隐藏文件夹，它们一个代表上一级目录，一个代表当前目录。</p><h4 id="运行程序" tabindex="-1">运行程序 <a class="header-anchor" href="#运行程序" aria-label="Permalink to &quot;运行程序&quot;">​</a></h4><p>在 <code>Windows</code> 中如果想运行程序，我们都是双击程序快捷方式或程序启动文件。而在 <code>DOS</code> 中，如果我们想要运行程序，只需要输入程序启动文件路径，然后回车即可。</p><p>例如：我想运行钉钉程序，我知道它的启动程序地址，那么就可以利用 <code>Tab</code> 快速提示着来输入好地址。下图的 <code>&quot;&quot;</code> 是按 <code>Tab</code> 自动生成的，<code>DOS </code>里为了防止空格产生的影响，可以加 <code>&quot;&quot;</code> 进行包裹，表示一个整体。</p><p>然后就可以运行 <code>java.exe </code>了，后面追加一个 <code>-version</code> 可以用来查看 <code>JDK</code> 的版本，如果出现下方所示内容，说明 <code>JDK</code> 的安装是完全正常的。</p><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p><code>DOS</code> 中可以省略 <code>exe</code> 之类的后缀</p></div><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>在刚才的内容搞定后，其实我们的 Java 开发环境已经搭建完了，我们之后开发 Java 程序会一直使用刚才的<code>java.exe </code>程序。不过现在使用还是挺麻烦的，每次都要在 <code>DOS</code> 中先找到程序或输入程序路径才能运行，有没有什么办法可以在 <code>DOS</code> 任意目录使用 <code>java.exe</code> 呢？</p><p>看看百度百科了解一下环境变量吧，其实环境变量就是操作系统里存储的一些参数或关键值，每个在操作系统里运行的程序都可以获取到这些存储的内容。（后面我们学到变量这一程序概念时，就可以更好的理解它的作用了，到时候记得回来再看看）</p><h3 id="path环境变量" tabindex="-1">path环境变量 <a class="header-anchor" href="#path环境变量" aria-label="Permalink to &quot;path环境变量&quot;">​</a></h3><p>其中 <code>path</code> 环境变量就是用来存储路径列表的，里面存储了一个个的路径。当我们在 <code>DOS</code> 命令行中直接输入程序的名字然后回车，这时候 <code>DOS</code> 会先在当前目录下搜索该文件，若找到则运行之，若找不到该文件，则根据 <code>path</code> 环境变量所设置的路径列表，顺序逐条地搜索这些路径下是否有该程序，有的话也能运行。</p><p>这就是我们现在需要的，可以有效解决我们为了运行 <code>java.exe</code> 而很麻烦的输入路径等，一劳永逸。有些同学还把一些游戏启动程序存到了 <code>path</code> 环境变量。</p><h3 id="配置java-home" tabindex="-1">配置JAVA_HOME <a class="header-anchor" href="#配置java-home" aria-label="Permalink to &quot;配置JAVA_HOME&quot;">​</a></h3><p>接下来就将 <code>java.exe</code> 的程序目录存储到 <code>path</code> 环境变量吧。</p><p>1.点击 <code>系统变量</code> 下的 <code>新建</code>，在弹出 <code>新建系统变量</code> 窗口后，将变量值设为 JDK 安装路径（bin 目录上一级），变量名设为 <code>JAVA_HOME</code> （之所以叫这名，是因为Maven、Tomcat等日后所用开发程序大多会使用到此</p><div class="danger custom-block"><p class="custom-block-title">笔者说</p><p><code>Win7</code>系统的 <code>path</code> 环境变量是全部在一起的，而不是像 <code>Win10</code> 这样一条条很清晰。自己去新加入一条：<code>%JAVA_HOME%\\bin;</code>（结尾这一定要用英文<code>;</code>来分隔其他的环境变量啊！）。</p><p>还有我们在配置 Java 安装路径的时候，需要格外注意不要将之前的还有一些系统的 <code>path</code> 配置删除，也不要写错。（不要在蓝色选中状态时直接输入，会全部替换的！！！）否则有很多系统命令就没法在 DOS 中便捷愉快的使用了。</p></div><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2>',36)),a("p",null,[e[16]||(e[16]=o("[1]闷瓜蛋子. Oracle如何对JDK收费[EB/OL]. ")),s(n,{href:"https://zhuanlan.zhihu.com/p/64731331",target:"_blank",rel:"noreferrer"},{default:d(()=>e[15]||(e[15]=[o("https://zhuanlan.zhihu.com/p/64731331")])),_:1}),e[17]||(e[17]=o(". 2019-06-18"))]),e[23]||(e[23]=a("h2",{id:"后记",tabindex:"-1"},[o("后记 "),a("a",{class:"header-anchor",href:"#后记","aria-label":'Permalink to "后记"'},"​")],-1)),e[24]||(e[24]=a("p",null,[a("code",null,"JDK"),o(" 的安装环节也就介绍到这。补充了一些基础内容，比较杂的感觉，但实际是顺序流程的学习，好好看看本篇文章大纲！每个步骤一定要实践一下！加油！有问题可以邮箱或订阅号联系笔者。")],-1)),e[25]||(e[25]=a("div",{class:"info custom-block"},[a("p",{class:"custom-block-title"},"笔者说"),a("p",null,"对于技术的学习，笔者一贯遵循的步骤是：先用最最简单的 demo 让它跑起来，然后学学它的最最常用 API 和 配置让自己能用起来，最后熟练使用的基础上，在空闲时尝试阅读它的源码让自己能够洞彻它的运行机制，部分问题出现的原因，同时借鉴这些技术实现来提升自己的代码高度。"),a("p",null,"所以在笔者的文章中，前期基本都是小白文，仅仅穿插很少量的源码研究。当然等小白文更新多了，你们还依然喜欢，后期会不定时专门对部分技术的源码进行解析。")],-1)),s(J),s(k)])}const L=g(K,[["render",q]]);export{F as __pageData,L as default};
