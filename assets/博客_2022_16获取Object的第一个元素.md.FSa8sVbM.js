import{_ as h}from"./chunks/WDocTitleMeta.Dzwi0aSq.js";import{_ as r,C as k,c as d,o as e,j as t,G as c,aU as E,a as o,w as b,b as g,e as y}from"./chunks/framework.BE_xAY4I.js";import"./chunks/theme.Dysj0b24.js";const O=JSON.parse('{"title":"获取Object的第一个元素","description":"","frontmatter":{},"headers":[],"relativePath":"博客/2022/16获取Object的第一个元素.md","filePath":"博客/2022/16获取Object的第一个元素.md","lastUpdated":1760196138000}'),u={name:"博客/2022/16获取Object的第一个元素.md"};function F(i,s,m,j,f,C){const l=h,p=k("ClientOnly");return e(),d("div",null,[s[0]||(s[0]=t("h1",{id:"获取object的第一个元素",tabindex:"-1"},[o("获取Object的第一个元素 "),t("a",{class:"header-anchor",href:"#获取object的第一个元素","aria-label":'Permalink to "获取Object的第一个元素"'},"​")],-1)),c(p,null,{default:b(()=>{var a,n;return[(((a=i.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=i.$frontmatter)==null?void 0:n.showWDocTitleMeta)??!0)?(e(),g(l,{key:0,article:i.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),s[1]||(s[1]=E(`<blockquote><p>目前遇到个业务需要获取Object中的第一个元素，具体背景这里不详细介绍，如果将数据改为数组的形式改动量较大，需要改接口定义层面，所以这里简单偷个懒</p></blockquote><h2 id="object中的键值迭代是无序的" tabindex="-1">Object中的键值迭代是无序的 <a class="header-anchor" href="#object中的键值迭代是无序的" aria-label="Permalink to &quot;Object中的键值迭代是无序的&quot;">​</a></h2><p>JS基础中的知识，也经常在一些八股文中看到就是<code>Map</code>和<code>Object</code>中的区别之一就是Object中的属性是无序的，而Map中的属性是有序的，那我们如何保证我们通过<code>Object.keys</code>等方法和<code>for in</code>方法迭代的第一个属性是我们预期的第一个呢？</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sym</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;456&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    c: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;789&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;111&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;222&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;333&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><pre><code>[ &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]
[ &#39;111&#39;, &#39;222&#39;, &#39;333&#39;, &#39;123&#39;, &#39;456&#39;, &#39;789&#39; ]
</code></pre><p>可以看到这个顺序并不是我们实际定义的顺序，实际情况可能比上述情况更加复杂，所以一般来说都说Obect内部属性的顺序是无序的。</p><h2 id="object中的键值迭代是有规律的" tabindex="-1">Object中的键值迭代是有规律的 <a class="header-anchor" href="#object中的键值迭代是有规律的" aria-label="Permalink to &quot;Object中的键值迭代是有规律的&quot;">​</a></h2><p>这就需要我们我们去确定对象迭代的内部机制是什么，这里直接说结论，具体过程可以参考<a href="https://www.stefanjudis.com/today-i-learned/property-order-is-predictable-in-javascript-objects-since-es2015/" target="_blank" rel="noreferrer">这篇文章</a>和<a href="https://juejin.cn/post/6932494622661083150" target="_blank" rel="noreferrer">这篇文章</a></p><ol><li>数字或者字符串类型的数字当作key时，输出是按照升序排序的</li><li>普通的字符串类型的key，就按照定义的顺序输出</li><li>Symbols也是和字符串类型的规则一样</li><li>如果是三种类型的key都有，那么顺序是 1 -&gt; 2 -&gt; 3</li></ol><p>我这里主要考虑我的业务场景，根据上述结论，也就是说我们只要key是字符串，那么其遍历顺序就是我们定义的顺序，这就符合我们的需求了</p><h2 id="回到主题-获取第一个元素" tabindex="-1">回到主题：获取第一个元素 <a class="header-anchor" href="#回到主题-获取第一个元素" aria-label="Permalink to &quot;回到主题：获取第一个元素&quot;">​</a></h2><p>最后，就是获取对象的第一个元素了，这里就不使用什么<code>for</code>循环再<code>break</code>了，这里可以直接使用解构优雅地获取：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	b: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;234&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	c: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;345&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">firstItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(firstItem);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><pre><code>123
</code></pre><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6932494622661083150" target="_blank" rel="noreferrer">https://juejin.cn/post/6932494622661083150</a></li><li><a href="https://www.stefanjudis.com/today-i-learned/property-order-is-predictable-in-javascript-objects-since-es2015/" target="_blank" rel="noreferrer">https://www.stefanjudis.com/today-i-learned/property-order-is-predictable-in-javascript-objects-since-es2015/</a></li></ul>`,16))])}const w=r(u,[["render",F]]);export{O as __pageData,w as default};
