import{_ as t}from"./chunks/WDocTitleMeta.LhMXelJA.js";import{_ as p,C as c,c as h,o,j as n,G as r,aU as k,a as E,w as g,b as u,e as m}from"./chunks/framework.BAt86-JR.js";import"./chunks/theme.Cah67Di0.js";const q=JSON.parse('{"title":"Node模块规范及模块加载机制","description":"","frontmatter":{},"headers":[],"relativePath":"博客/2022/09Node模块规范及模块加载机制.md","filePath":"博客/2022/09Node模块规范及模块加载机制.md","lastUpdated":1760196138000}'),b={name:"博客/2022/09Node模块规范及模块加载机制.md"};function y(e,s,F,_,A,B){const d=t,l=c("ClientOnly");return o(),h("div",null,[s[0]||(s[0]=n("h1",{id:"node模块规范及模块加载机制",tabindex:"-1"},[E("Node模块规范及模块加载机制 "),n("a",{class:"header-anchor",href:"#node模块规范及模块加载机制","aria-label":'Permalink to "Node模块规范及模块加载机制"'},"​")],-1)),r(l,null,{default:g(()=>{var i,a;return[(((i=e.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showWDocTitleMeta)??!0)?(o(),u(d,{key:0,article:e.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),s[1]||(s[1]=k(`<blockquote><p>这是重新阅读《深入浅出NodeJS》的相关笔记，这次阅读发现自己依旧收获很多，而第一次阅读的东西也差不多忘记完了，所以想着这次过一遍脑子，用自己的理解输出一下，方便记忆以及以后回忆...</p></blockquote><p>历史原因，<code>JavaScript</code>以前是没有模块机制的，这对于<code>node</code>来说想要编写一个大型项目是很难的，所以<code>node</code>采用了社区提出的<code>CommmonJS</code>规范</p><h2 id="认识commonjs" tabindex="-1">认识CommonJS <a class="header-anchor" href="#认识commonjs" aria-label="Permalink to &quot;认识CommonJS&quot;">​</a></h2><blockquote><p>这里主要介绍的是大家常见的<code>JavaScript</code>文件模块，其他的将在后续章节介绍</p></blockquote><p><code>CommonJS</code>对模块的定义非常简单，主要分为模块引用、模块定义和模块标识三个部分：</p><p>比如我们有如下很常见的代码：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> math</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;math&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>模块引用：<code>const math</code>中的<code>math</code>就是模块引用</li><li>模块标识：<code>require(&#39;math&#39;)</code>中的<code>math</code>就是模块标识，必须是以小驼峰命名的字符串或者路径</li><li>模块定义：简单理解就是一个文件就是一个模块，模块中 存在一个<code>module</code>对象，这个对象包含一个<code>exports</code>属性，我们只要将该文件上的方法挂载到<code>exports</code>对象，其他文件就可以引入了，而没有导出的方法/变量就会被隔离，从而避免变量污染</li></ul><p>这里模块定义讲得比较粗糙，接下来将具体讲讲<code>node</code>中对于<code>CommonJS</code>规范的实现：</p><h2 id="javascript文件模块commonjs实现" tabindex="-1">JavaScript文件模块CommonJS实现 <a class="header-anchor" href="#javascript文件模块commonjs实现" aria-label="Permalink to &quot;JavaScript文件模块CommonJS实现&quot;">​</a></h2><p>刚才已经简单介绍了<code>node</code>中对于模块使用的一些语法，比如可以通过<code>require</code>引入，通过<code>exports</code>导出等等，同时，如果你不是前端领域的新手，你应该也知道我们在<code>node</code>环境中编写代码时，还可以使用<code>__filename</code>和<code>__dirname</code>这两个变量</p><p>但是似乎我们自己并没有定义这些对象/变量，就可以直接使用，所以这就引出了该小节将要解释的--node对于<code>JavaScript</code>文件模块的处理。</p><p>基础知识补充：基本上一个模块机制就是要解决作用域的问题，简单理解就是我们在编写自己的模块时，变量命名这些不会影响到其他模块。同时，要使我们编写的模块有用，我们还会导出一些出口方便其他模块使用，基本上就是一个封装的思想... 然后我们都知道函数是有自己的作用域的，函数内部的变量作用在该函数域内，所以<code>node</code>就基于此实现了该模块机制。</p><p>事实上，当我们执行<code>node test.js</code>的时候，也就是在编译的过程中，<code>node</code>会把获取的<code>JavaScript</code>文件内容封装到一个函数中，并且把解析该文件过程中的一些结果作为形参传入该函数，具体如下：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// test.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户写的一些代码逻辑&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>包装后：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户写的一些代码逻辑&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所以我们平常在<code>node</code>环境中写的代码都会经过这样一个包装，这也就是我们刚才提到的为什么可以直接使用<code>require</code>、<code>exports</code>等属性的原因，同时也就实现了各个模块文件之间的作用域隔离。</p><blockquote><p>注：对于不同的文件名，<code>node</code>载入的方法也不同，<code>.js</code>的就是通过上述方法载入的，而其他的如<code>.node</code>、<code>.json</code>本篇文章不作详细介绍，除了上述这三个扩展名，其他扩展名的文件如果交给<code>node</code>执行，都会被当作<code>.js</code>文件载入。</p></blockquote><p>接下来我将一一介绍<code>node</code>对我们代码进行包装处理的函数中的形参，相信认识了这几个参数，你就对<code>node</code>中实现的模块机制就理解的大差不差了，其中<code>__filename</code>、<code>__dirname</code>就是文件名和路径名，两个字符串就不详细介绍了，接下来主要介绍<code>module</code>、<code>exports</code>、<code>require</code>这三个参数的理解。</p><h2 id="理解module参数-基本形成模块机制" tabindex="-1">理解<code>module</code>参数，基本形成模块机制 <a class="header-anchor" href="#理解module参数-基本形成模块机制" aria-label="Permalink to &quot;理解\`module\`参数，基本形成模块机制&quot;">​</a></h2><p>我们可以自己尝试一下，新建一个<code>test.js</code>文件，加上<code>console.log(module);</code>这行代码，看看这个参数是什么：</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221104220110.png" alt="" loading="lazy"></p><p>接下来详细介绍一个这个参数：<code>module</code>参数其实是<code>node</code>通过一个叫做<code>Module</code>的构造函数创建的一个实例，所以我们基本上认识这个构造函数就可以了，它的定义如下<a href="https://www.nodeapp.cn/modules.html#modules_the_module_object" target="_blank" rel="noreferrer">详细介绍</a>：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块的标识符， 通常是完全解析后的文件名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.exports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}; </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 最先引用该模块的模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (parent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent.children) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  parent.children.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块的完全解析后的文件名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.loaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块是否已经加载完成，或正在加载中</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 被该模块引用的模块对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.paths </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块的搜索路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>node</code>环境中每个文件都有由这个构造函数创建的唯一实例，一个文件对应一个<code>module</code>实例，我们可以把其理解为一个节点，这个节点有一些属性，如<code>id</code>、<code>filename</code>...等，然后这个节点的入度就是<code>children</code>属性，这样就可以抽象出一个模块引用图：</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221104230432.png" alt="" loading="lazy"></p><p>可以看到上述这两个简单的测试程序，我们执行<code>a.js</code>得到上述的输出，由于<code>b.js</code>中没有引用任何模块，所以在执行<code>const b = require(&#39;./b.js&#39;)</code>时不会得到输出。由此，我们其实可以得到这样一张模块引用图：</p><p><img src="https://oss.justin3go.com/blogs/%E6%A8%A1%E5%9D%97%E5%BC%95%E7%94%A8%E9%93%BE%E6%8E%A5%E5%9B%BE.png" alt="" loading="lazy"></p><p>如果是大型项目，就会形成一个非常复杂的有向图了，而有了图这个数据结构，其实我们似乎就能用一些算法对模块应用进行一些分析处理，比如最简单、也是最容易想到的就是编写一个<code>vscode</code>插件来对一个<code>node</code>项目进行模块引用的分析并可视化，方便新接触项目成员快速熟悉项目，当然，要实现这个想法应该还要考虑更多，这里不深入...</p><p>继续，由此一个文件对应一个模块的机制通过<code>module</code>参数就实现了</p><h2 id="理解exports参数" tabindex="-1">理解<code>exports</code>参数 <a class="header-anchor" href="#理解exports参数" aria-label="Permalink to &quot;理解\`exports\`参数&quot;">​</a></h2><p>你可能会疑惑<code>module</code>实例对象中不是已经有了<code>exports</code>属性了吗，它与<code>node</code>处理文件中传入的<code>exports</code>形参有什么关系呢？这也是我最开始接触这个模块机制的时候产生的疑惑~</p><p>总的来说<code>exports</code>就是<code>module.exports</code>的快捷方式</p><p>一般来说，我们都是直接使用<code>exports.hello = hello(){ console.log(&#39;hello&#39;) }</code>导出即可，这样也是最方便并且最好辨认的。</p><p>但是你需要注意的是，exports是<code>node</code>包装我们编写的js文件使用的函数中的一个形参，文章开始部分也介绍过，既然<code>exports</code>是通过形参的方式传入的，如果我们要对其直接赋值<code>exports = {hello: hello(){ console.log(&#39;hello&#39;)}</code>，会改变形参的引用，并不能修改作用域外的值，这是<code>JavaScript</code>的基础知识。</p><p>所以此时我们只能修改<code>module.exports = {hello: hello(){ console.log(&#39;hello&#39;)}</code>这样是可以的，但不建议这样做，多种方式的导出会使人迷惑，除非迫不得已。</p><p>最后，<code>exports</code>是一个对象，我们在当前函数作用域中向这个对象修改了属性，是可以反应在函数作用域外面的，因为是修改的引用对象类型。至此，我们就可以既实现作用域隔离避免变量污染，又可以暴露除该模块的功能方法，最终实现了这样一个模块机制</p><h2 id="理解require是如何加载模块的" tabindex="-1">理解<code>require</code>是如何加载模块的 <code>*</code> <a class="header-anchor" href="#理解require是如何加载模块的" aria-label="Permalink to &quot;理解\`require\`是如何加载模块的 \`*\`&quot;">​</a></h2><p><code>require()</code>是我们导入别的模块需要用到的一个方法，就如本篇文章中的第一个例子<code>const math = require(&#39;math&#39;)</code>，它可以使我们非常方便地导入其他模块，但是它的内部实现其实相对来说比较复杂，因为<code>require()</code>函数除了可以加载上述中<code>.js</code>结尾的文件模块，还可以加载其他扩展名结尾的文件模块，以及<code>node</code>中内置的核心模块，甚至说传给<code>require()</code>的路径参数是一个目录，也需要一定的策略去解析它。</p><p>总的来说，在<code>node</code>中引入模块，需要经历如下三个步骤：</p><ul><li>路径分析</li><li>文件定位</li><li>编译执行</li></ul><p>在讲解具体的模块加载过程之前，我们先了解一下上面提到的核心模块与文件模块之间的概念：</p><ul><li>核心模块：在node源代码的编译过程中，就编译进了二进制执行文件。并且部分核心模块在<code>node</code>启动的时候就被直接加载进了内存中，所以这部分核心模块引入时，文件定位和编译执行这两步可以省略，并且路径分析中优先判断，所以其加载速度最快</li><li>文件模块：之前介绍的<code>.js</code>结尾的就是文件模块中的一种，文件模块在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度相对较慢。文件模块用可以路径形式的文件模块（用户自己编写的）和自定义文件模块（通常是第三方包）</li></ul><p>接下来我们就用下方这个流程图来梳理一下当<code>require</code>引入一个模块标识的时候是如何判断的。基于此，我们可以对<code>node</code>的模块规范更加了解，并且可以在模块引入时做一些简单的性能优化：</p><p><img src="https://oss.justin3go.com/blogs/%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png" alt="" loading="lazy"></p><p>模块加载流程口语描述：</p><ul><li>首先<code>node</code>会判断该模块之前是否加载过，在缓存中是否包含，如果包含，显然就可以直接从缓存中加载；</li><li>然后就是根据传给<code>require</code>的模块标识，判断该模块标识属于哪一类型，是模块名的字符串还是模块所在的路径</li><li>之后就是如果是否属于核心模块，<code>node</code>自己心里清楚，内部存储相关的数组来记录，如果是自定义模块（就是平常我们经常见到的第三方包），就通过一个策略去查找该模块所在的路径，而这个策略是存储在<code>module.paths</code>中，你可以自行<code>console.log</code>观察一下，或者在之前介绍<code>module</code>的时候也有相关的打印信息；</li><li>再然后我们获得了一个路径，这个路径如果有显式的文件扩展名，就按照上述方式加载，而如果没有扩展名，就按照<code>.js .json .node</code>依次尝试，而有可能传递的是一个目录，此时<code>node</code>就会去找该目录下的<code>packsge.json</code>中的<code>main</code>属性对应的文件或者<code>index</code>文件名的文件</li><li>最后，如果都不行，就包找不到该文件的错误</li></ul><p>上述在通过<code>.js .json .node</code>依次尝试是什么文件的时候，需要调用fs模块同步阻塞执行，所以如果是<code>.node</code>和<code>.json</code>最后就带上扩展名，会加快一点速度；</p><p>其他：</p><blockquote><p>对于核心模块的加载，涉及到一些<code>c++</code>代码，所以流程图中对其简化，这里大致讲一讲其中的流程，不感兴趣的可以略过这一部分：</p></blockquote><p>对于核心模块，<code>node</code>中也分为两种，一种是由<code>JavaScript</code>编写的模块，一种是由<code>C++/C</code>编写的模块。一般来说，<code>C++</code>模块主内完成核心，<code>JavaScript</code>主外实现封装，<code>Node</code>这种静态语言结合脚本语言的复合模式在开发体验和性能之间找到平衡点。</p><p>对于由<code>C/C++</code>编写的模块一般也叫做<code>内建模块</code>，我们可以通过<code>log</code>如下信息打印除<code>node</code>中包含哪些内建模块：</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221105104148.png" alt="" loading="lazy"></p><p><strong>内建模块的加载</strong>：会先创建一个<code>exports</code>空对象，然后调用<code>get_builtin_module()</code>方法去除内建模块对象，通过执行<code>register_func()</code>填充<code>exports</code>对象，最后将<code>exports</code>对象按模块名缓存，并返回给调用方完成导出。</p><p>一般来说，<code>node</code>并不推荐直接加载内建模块，而是通过对应封装地<code>JavaScript</code>核心模块进行加载，一个完整地核心模块加载流程如下：</p><p><img src="https://oss.justin3go.com/blogs/%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B.png" alt="" loading="lazy"></p><blockquote><p>内建模块这块由于我缺乏实践，所以仅简单记录了一些要点，并不对其进行解释，如果你是这方面的新手，不推荐通过我这篇文章学习</p></blockquote><blockquote><p>一般来说，当<code>node</code>性能出现瓶颈，我们是通过编写<code>C++</code>扩展模块进行性能优化的，下面是一个简单的模块调用图</p></blockquote><p><img src="https://oss.justin3go.com/blogs/%E6%A8%A1%E5%9D%97%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" alt="" loading="lazy"></p><h2 id="module对象其他的一些东西" tabindex="-1"><code>Module</code>对象其他的一些东西 <a class="header-anchor" href="#module对象其他的一些东西" aria-label="Permalink to &quot;\`Module\`对象其他的一些东西&quot;">​</a></h2><p>我们在前面仅仅介绍了<code>module</code>实例中有哪些属性，但其实<code>Module</code>这个对象还挂载了一些属性：</p><ol><li><code>Module._extensions</code>：对于不同扩展名的文件的处理函数保存在这个属性上：</li></ol><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221105181020.png" alt="" loading="lazy"></p><p>我们可以在此基础上自定义一些其他文件扩展名的处理函数，不过<code>node</code>并不建议我们这样做，官方建议先将其他语言或文件编译成为<code>JavaScript</code>文件后再加载，这样做的好处是在于不用将繁琐的编译加载过程引入<code>node</code>的执行过程中</p><ol start="2"><li><code>Module._cache</code>：已经编译执行成功的文件模块会缓存到该对象上：</li></ol><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221105181457.png" alt="" loading="lazy"></p><h2 id="碎碎念" tabindex="-1">碎碎念 <a class="header-anchor" href="#碎碎念" aria-label="Permalink to &quot;碎碎念&quot;">​</a></h2><p>作为今年的应届生，之前跨部门转正二面问到这一方面，当时这些基础知识还有点印象，但是不多！最终挂掉了，回来也没能抓住秋招的尾巴，好好复习，all in 春招了💪</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li>《深入浅出NodeJS》</li><li><a href="https://www.nodeapp.cn/" target="_blank" rel="noreferrer">https://www.nodeapp.cn/</a></li><li><a href="https://juejin.cn/post/6844903676922822663" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903676922822663</a></li></ul>`,71))])}const j=p(b,[["render",y]]);export{q as __pageData,j as default};
