import{_ as h}from"./chunks/WDocTitleMeta.CNLzBxZd.js";import{_ as r,C as d,c as k,o as t,j as n,G as c,aU as g,a as o,w as b,b as m,e as F}from"./chunks/framework.DBcUES_J.js";import"./chunks/theme.BsIQZhsk.js";const x=JSON.parse('{"title":"git常用操作","description":"","frontmatter":{},"headers":[],"relativePath":"博客/2022/04git常用操作.md","filePath":"博客/2022/04git常用操作.md","lastUpdated":1760196138000}'),u={name:"博客/2022/04git常用操作.md"};function y(i,s,v,C,B,f){const l=h,p=d("ClientOnly");return t(),k("div",null,[s[0]||(s[0]=n("h1",{id:"git常用操作",tabindex:"-1"},[o("git常用操作 "),n("a",{class:"header-anchor",href:"#git常用操作","aria-label":'Permalink to "git常用操作"'},"​")],-1)),c(p,null,{default:b(()=>{var e,a;return[(((e=i.$frontmatter)==null?void 0:e.aside)??!0)&&(((a=i.$frontmatter)==null?void 0:a.showWDocTitleMeta)??!0)?(t(),m(l,{key:0,article:i.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),s[1]||(s[1]=g(`<h2 id="同步master" tabindex="-1">同步master <a class="header-anchor" href="#同步master" aria-label="Permalink to &quot;同步master&quot;">​</a></h2><ul><li>而如果feat分支有两个提交，然后直接<code>git rebase master</code>，就有可能需要处理两次冲突(假设master分支提交的与feat提交的在同一份文件中)，<code>git add .</code>,<code>git rebase --continue</code>,</li></ul><h2 id="合并多个commit" tabindex="-1">合并多个commit <a class="header-anchor" href="#合并多个commit" aria-label="Permalink to &quot;合并多个commit&quot;">​</a></h2><ul><li>git log --oneline</li><li>git rebase -i commitHash ：<code>commitHash</code>是commitID，是需要合并的commit的前一个commit节点的ID</li><li>git rebase -i head~2 ：合并最近两次提交</li><li>最后记得使用git push -f 强制推送，而不是使用vscode的同步代码，那个会先拉取。</li><li>rebase的时候，修改冲突后的提交不是使用commit命令，而是执行rebase命令指定 --continue选项。若要取消rebase，指定 --abort选项。</li></ul><h2 id="cherry-pick" tabindex="-1">cherry-pick <a class="header-anchor" href="#cherry-pick" aria-label="Permalink to &quot;cherry-pick&quot;">​</a></h2><p>它的功能是把已经存在的commit进行挑选，然后重新提交。 （今天我记得就是我有分支被我弄乱了，因为我在开发的过程中同步拉取了远程的代码，所以顺序是我提交--&gt;别人提交--&gt;我提交）这时候，使用check-pick就很好的解决了合并提交记录的问题，当然，最好还是不要在开发分支的过程中同步远程master仓库。</p><p>例子： 在<code>master</code>的基础上，<code>test</code>进行了2次提交，<code>normal</code>进行了1次提交。现在想把<code>test</code>的第2次提交 （仅仅是第2次提交，不包含第1次提交）和<code>normal</code>的第1次提交合并到master分支，直接merge分支是行不通的，这样会把两个分支的全部提交都合并到<code>master</code>，用<code>cherry-pick</code>即可完美的解决问题， 如果<code>normal</code>第一次提交的<code>SHA-1</code>值是<code>9b47dd</code>，<code>test</code>第二次提交的值是<code>dd4e49</code>，执行如下命令即可把这两个提交合并到<code>master</code></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cherry-pick</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9b47dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dd4e49</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果有冲突，则需要修改冲突文件，然后添加修改文件到暂存区，命令如下：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>最后执行</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cherry-pick</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --continue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>cherry-pick后</p><p>最后要说明的是：</p><ul><li>执行完<code>git cherry-pick --continue</code>后不需要commit了，该命令会自动提交</li><li><code>git cherry-pick --abort</code>可以放弃本次<code>cherry-pick</code></li><li><code>git cherry-pick 9b47dd dd4e49</code>和<code>git cherry-pick dd4e49 9b47dd</code>这两个的结果可能会<strong>不一样</strong>，<strong>顺序很重要</strong></li></ul><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>git amend：修改同一个分支最近提交的注解和内容</li><li>在revert可以取消指定的提交内容。使用后面要提到的rebase -i或reset也可以删除提交。但是，不能随便删除已经发布的提交，这时需要通过revert创建要否定的提交。</li><li>在reset可以遗弃不再使用的提交。执行遗弃时，需要根据影响的范围而指定不同的模式，可以指定是否复原索引或工作树的内容。</li><li>在rebase指定i选项，您可以改写、替换、删除或合并提交。</li></ul><h2 id="优秀文章" tabindex="-1">优秀文章 <a class="header-anchor" href="#优秀文章" aria-label="Permalink to &quot;优秀文章&quot;">​</a></h2><ul><li><a href="https://backlog.com/git-tutorial/cn/stepup/stepup1_5.html" target="_blank" rel="noreferrer">猴子都能懂的git入门</a></li><li><a href="https://juejin.cn/post/7064134612129644558" target="_blank" rel="noreferrer">如何优雅解决git 中冲突</a></li><li><a href="https://juejin.cn/post/6844903521993621511" target="_blank" rel="noreferrer">Git提交历史的修改删除合并</a></li><li><a href="https://juejin.cn/post/6844903600976576519" target="_blank" rel="noreferrer">使用git rebase合并多次commit</a></li><li><strong><a href="https://juejin.cn/post/7024043015794589727" target="_blank" rel="noreferrer">前端架构师的 git 功力，你有几成火候？</a></strong></li></ul><h2 id="摘录" tabindex="-1">摘录 <a class="header-anchor" href="#摘录" aria-label="Permalink to &quot;摘录&quot;">​</a></h2><p>总结下合并规则：</p><ul><li>develop -&gt; (merge) -&gt; dev-*</li><li>dev-* -&gt; (cherry-pick) -&gt; develop</li><li>develop -&gt; (rebase) -&gt; staging</li><li>staging -&gt; (rebase) -&gt; release</li></ul><h3 id="为什么合并到-develop-必须用-cherry-pick" tabindex="-1">为什么合并到 develop 必须用 cherry-pick？ <a class="header-anchor" href="#为什么合并到-develop-必须用-cherry-pick" aria-label="Permalink to &quot;为什么合并到 develop 必须用 cherry-pick？&quot;">​</a></h3><p>使用 merge 合并，如果有冲突，会产生分叉；<code>dev-*</code> 分支多而杂，直接 merge 到 develop 会产生错综复杂的分叉，难以理清提交进度。</p><p>而 cherry-pick 只将需要的 commit 合并到 develop 分支上，且不会产生分叉，使 git 提交图谱（git graph）永远保持一条直线。</p><p>再有，模块开发分支完成后，需要将多个 commit 合为一个 commit，再合并到 develop 分支，避免了多余的 commit，这也是不用 merge 的原因之一。</p><h3 id="为什么合并到-staging-release-必须用-rebase" tabindex="-1">为什么合并到 staging/release 必须用 rebase？ <a class="header-anchor" href="#为什么合并到-staging-release-必须用-rebase" aria-label="Permalink to &quot;为什么合并到 staging/release 必须用 rebase？&quot;">​</a></h3><p>rebase 译为变基，合并同样不会产生分叉。当 develop 更新了许多功能，要合并到 staging 测试，不可能用 cherry-pick 一个一个把 commit 合并过去。因此要通过 rebase 一次性合并过去，并且保证了 staging 与 develop 完全同步。</p><p>release 也一样，测试通过后，用 rebase 一次性将 staging 合并过去，同样保证了 staging 与 release 完全同步。</p><h3 id="误操作的撤回方案" tabindex="-1">误操作的撤回方案 <a class="header-anchor" href="#误操作的撤回方案" aria-label="Permalink to &quot;误操作的撤回方案&quot;">​</a></h3><p>开发中频繁使用 git 拉取推送代码，难免会有误操作。这个时候不要慌，git 支持绝大多数场景的撤回方案，我们来总结一下。</p><p>撤回主要是两个命令：<code>reset</code> 和 <code>revert</code></p><h4 id="git-reset" tabindex="-1">git reset <a class="header-anchor" href="#git-reset" aria-label="Permalink to &quot;git reset&quot;">​</a></h4><p>reset 命令的原理是根据 <code>commitId</code> 来恢复版本。因为每次提交都会生成一个 commitId，所以说 reset 可以帮你恢复到历史的任何一个版本。</p><blockquote><p>这里的版本和提交是一个意思，一个 commitId 就是一个版本</p></blockquote><p>reset 命令格式如下：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [option] [commitId]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>比如，要撤回到某一次提交，命令是这样：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cc7b5be</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面的命令，commitId 是如何获取的？很简单，用 <code>git log</code> 命令查看提交记录，可以看到 commitId 值，这个值很长，我们取前 7 位即可。</p><p>这里的 option 用的是 <code>--hard</code>，其实共有 3 个值，具体含义如下：</p><ul><li><code>--hard</code>：撤销 commit，撤销 add，删除工作区改动代码</li><li><code>--mixed</code>：默认参数。撤销 commit，撤销 add，还原工作区改动代码</li><li><code>--soft</code>：撤销 commit，不撤销 add，还原工作区改动代码</li></ul><p>这里要格外注意 <code>--hard</code>，使用这个参数恢复会删除工作区代码。也就是说，如果你的项目中有未提交的代码，使用该参数会直接删除掉，不可恢复，慎重啊！</p><p>除了使用 commitId 恢复，git reset 还提供了恢复到上一次提交的快捷方式：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --soft</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>HEAD^</code> 表示上一个提交，可多次使用。</p><p>其实平日开发中最多的误操作是这样：刚刚提交完，突然发现了问题，比如提交信息没写好，或者代码更改有遗漏，这时需要撤回到上次提交，修改代码，然后重新提交。</p><p>这个流程大致是这样的：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 回退到上次提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD^</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 修改代码...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 加入暂存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4. 重新提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;fix: ***&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>针对这个流程，git 还提供了一个更便捷的方法：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --amend</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令会直接修改当前的提交信息。如果代码有更改，先执行 <code>git add</code>，然后再执行这个命令，比上述的流程更快捷更方便。</p><p>reset 还有一个非常重要的特性，就是<strong>真正的后退一个版本</strong>。</p><p>什么意思呢？比如说当前提交，你已经推送到了远程仓库；现在你用 reset 撤回了一次提交，此时本地 git 仓库要落后于远程仓库一个版本。此时你再 push，远程仓库会拒绝，要求你先 pull。</p><p>如果你需要远程仓库也后退版本，就需要 <code>-f</code> 参数，强制推送，这时本地代码会覆盖远程代码。</p><p>注意，<code>-f</code> 参数非常危险！如果你对 git 原理和命令行不是非常熟悉，切记不要用这个参数。</p><p>那撤回上一个版本的代码，怎么同步到远程更安全呢？</p><p>方案就是下面要说的第二个命令：<code>git revert</code></p><h4 id="git-revert" tabindex="-1">git revert <a class="header-anchor" href="#git-revert" aria-label="Permalink to &quot;git revert&quot;">​</a></h4><p>revert 与 reset 的作用一样，都是恢复版本，但是它们两的实现方式不同。</p><p>简单来说，reset 直接恢复到上一个提交，工作区代码自然也是上一个提交的代码；而 revert 是新增一个提交，但是这个提交是使用上一个提交的代码。</p><p>因此，它们两恢复后的代码是一致的，区别是一个新增提交（revert），一个回退提交（reset）。</p><p>正因为 revert 永远是在新增提交，因此本地仓库版本永远不可能落后于远程仓库，可以直接推送到远程仓库，故而解决了 reset 后推送需要加 <code>-f</code> 参数的问题，提高了安全性。</p><p>说完了原理，我们再看一下使用方法：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [commitId]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>掌握了原理使用就很简单，只要一个 commitId 就可以了。</p><h3 id="tag-与生产环境" tabindex="-1">Tag 与生产环境 <a class="header-anchor" href="#tag-与生产环境" aria-label="Permalink to &quot;Tag 与生产环境&quot;">​</a></h3><p>git 支持对于历史的某个提交，打一个 tag 标签，常用于标识重要的版本更新。</p><p>目前普遍的做法是，用 tag 来表示生产环境的版本。当最新的提交通过测试，准备发布之时，我们就可以创建一个 tag，表示要发布的生产环境版本。</p><p>比如我要发一个 <code>v1.2.4</code> 的版本：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.2.4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my version 1.2.4&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后可以查看：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.2.4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag v1.2.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tagger:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2218466341@qq.co</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Date:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Sun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 26</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10:24:30</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2021</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +0800</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.2.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>最后用 git push 将 tag 推到远程：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.2.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>这里注意</strong>：tag 和在哪个分支创建是没有关系的，tag 只是提交的别名。因此 commit 的能力 tag 均可使用，比如上面说的 <code>git reset</code>，<code>git revert</code> 命令。</p><p>当生产环境出问题，需要版本回退时，可以这样：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [pre-tag]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 若上一个版本是 v1.2.3，则：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> revert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.2.3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在频繁更新，commit 数量庞大的仓库里，用 tag 标识版本显然更清爽，可读性更佳。</p><p>再换一个角度思考 tag 的用处。</p><p>上面分支管理策略的部分说过，release 分支与生产环境代码同步。在 CI/CD（下面会讲到）持续部署的流程中，我们是监听 release 分支的推送然后触发自动构建。</p><p>那是不是也可以监听 tag 推送再触发自动构建，这样版本更新的直观性是不是更好？</p>`,82))])}const D=r(u,[["render",y]]);export{x as __pageData,D as default};
