import{_ as c}from"./chunks/ArticleMetadata.CtBSOJVh.js";import{a2 as F,a as y,u as i,B as n,e as s,x as m,ap as k,m as a,o as h,p as u,q as C}from"./chunks/framework.DM74m2GY.js";import"./chunks/theme.DeB3itL1.js";const I=JSON.parse('{"title":"第五版博客发布完成","description":"","frontmatter":{"createtime":"2024/5/23","title":"第五版博客发布完成","outline":[2,3],"categories":["博客"],"tags":["建站"]},"headers":[],"relativePath":"博客/2024/05/23第五版博客发布完成.md","filePath":"博客/2024/05/23第五版博客发布完成.md","lastUpdated":1732378603000}'),D={name:"博客/2024/05/23第五版博客发布完成.md"},_=s("h1",{id:"第五版博客发布完成",tabindex:"-1"},[m("第五版博客发布完成 "),s("a",{class:"header-anchor",href:"#第五版博客发布完成","aria-label":'Permalink to "第五版博客发布完成"'},"​")],-1),b=k(`<h2 id="_1-技术选型" tabindex="-1">1. 技术选型 <a class="header-anchor" href="#_1-技术选型" aria-label="Permalink to &quot;1. 技术选型&quot;">​</a></h2><p>  我们知道CI/CD（持续集成/持续部署）是一种软件开发实践，旨在加快开发过程、提高软件质量和简化部署流程。</p><p>  本项目之初也想集成某种CI/CD技术来提高开发效率和跨平台性编码，最开始采用了 GitHub Actions ，编写deploy.yaml来构建、打包、部署，代码提交事件触发“工作流”（workflows）。但效率并不高，并且没有集成编写 issues 就自动集成到项目日志板块中。</p><p>  第一种方案劝退，于是想到了第二种方案，能否有一个中间件工具，来实现markdown到vitepress平台的持续自动化部署？在逛github中，我发现了一个项目 <u><a href="https://elog.1874.cool/" target="_blank" rel="noreferrer">Elog</a></u>！！是一种 <code>开放式跨平台博客解决方案</code>。</p><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/202405232221241.png"><p>  花里胡哨的，关键是我也不用飞书啊，我就用VSCode来写markdown，typora我感觉也不大方便写笔记(外存储image太拉了)。这让我想起之前公司的同事，使用VSCode的SSH功能远程连接Docker容器进行代码编辑，照样自动化和远程执行，不就是本地维护版本的CI/CD了？（主要是在大四实习的公司，做Java的时候没去在公司wiki里学k8s，倒是学会了一手很棒的git....）</p><p>  Elog支持picgo图床，这绝对是最佳的解决方案！但由于我的vitepress定制功能过多，单一的纯markdown是完全不够,于是为了更好的兼容部分Vue代码的编写，<u><a href="https://stackblitz.com/" target="_blank" rel="noreferrer">StackBlitz</a></u>出现了。StackBlitz 是一个在线的全栈开发环境，它允许开发者在浏览器中直接编写、测试和分享代码。</p><div class="tip custom-block"><p class="custom-block-title">在使用过程中你需要下载翻墙工具，来登录github</p><p><a href="https://github.com/zzzgydi/clash-verge/releases/download/v1.3.8/Clash.Verge_1.3.8_x64_portable.zip" target="_blank" rel="noreferrer">-&gt; Clash.Verge_1.3.8_x64_portable.zip</a></p><p>订阅链接：</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">https://xipcloud.org/client/subscribe/clash/bfa4f20a9c8247c2aefb29eb55a99546</span></span></code></pre></div></div><p>从而使得在跨开发平台上，可以轻易编写项目。</p><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/202405232348538.png"><div class="tip custom-block"><p class="custom-block-title">这里我们不采用picgo，使用更好的picList</p><p><a href="https://release.piclist.cn/latest/PicList-Setup-2.8.5-x64.exe" target="_blank" rel="noreferrer">-&gt; picList</a></p></div><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/202405232351658.png"><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/202405240011762.png"><h2 id="_2-自动部署及发布" tabindex="-1">2. 自动部署及发布 <a class="header-anchor" href="#_2-自动部署及发布" aria-label="Permalink to &quot;2. 自动部署及发布&quot;">​</a></h2><p>  在准备工作完成之后，编写一个deploy.sh脚本文件来build打包成一个dist文件，用作静态网站发布。</p><details class="details custom-block"><summary>点击展开deploy.sh</summary><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#!/usr/bin/env sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 忽略错误</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">set</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -e</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 打包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 切换到 docs/.vitepress.dist目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dist</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;StackBlitz 自动部署 NetLify&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> init</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># git config --global http.postBuffer 524288000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># git commit -m &quot;自动部署vitepress&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># git config --global core.autocrlf false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/zhangjunjie-cn/zhangjunjiee.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># git checkout -b dist</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#拉取fetch到最新仓库并merge合并</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># git pull origin dist</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># git merge origin/dist </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># git checkout dist </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># git branch --set-upstream-to=origin/dist  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -A</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">msg</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/zhangjunjie-cn/zhangjunjiee.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --force</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> master:dist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 返回上次所在的目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> -</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 删除dist文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dist</span></span></code></pre></div></details><div class="warning custom-block"><p class="custom-block-title">deploy.sh 的编写问题</p><p>因为是web vscode进行代码提交，提交的文件/dist是不需要 git init的，这就导致一个问题，在本地mian分支下需要将/dist提交到GitHub的oringin/dist分支上，默认的push orgin需要本地与远程的分支名相同，如需特别指定可以使用 <code>git branch --set-upstream-to=origin/dist </code>进行指定，或者 <code>git push origin master:dist</code>，但是在web vscode环境下都error异常：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">remote:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Enumerating</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> objects:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 154</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">remote:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Counting</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> objects:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (154/154), done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">remote:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Compressing</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> objects:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (149/149), done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">remote:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Total</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 154</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (delta </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), reused 154 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">delta</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), pack-reused 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Unpacking</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> objects:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (153/153), done.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Could</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dist.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">To</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/zhangjunjie-cn/zhangjunjiee.git</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [rejected]        </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">master</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (non-fast-forward)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">error:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> failed</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> some</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> refs</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;https://github.com/zhangjunjie-cn/zhangjunjiee.git&#39;</span></span></code></pre></div><p>提示找不到dist，我误以为必须要求本地的dist分支才能提交，指定远程的dist是不允许的，于是添加了以下代码：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dist</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">#git merge origin/dist </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> dist</span></span></code></pre></div><p>但提交的时候仍报这种异常，显然因为git的推送机制的问题，无法验证本地和云端的代码差异，由于web code没有git init 的缓存机制无法进行校验，于是唯一的解决方案就是跳过git push的校验，添加<code>--force</code>进行强制提交。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> https://github.com/zhangjunjie-cn/zhangjunjiee.git</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --force</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> master:dist</span></span></code></pre></div></div><p>  在/zhangjunjiee目录下，执行<code>sh deploy.sh</code>即可。在github项目中就会有一个dist的分支，我们主要使用这个分支进行代码的静态部署。然后在 <u><a href="https://app.netlify.com/start" target="_blank" rel="noreferrer">Netlify</a></u> 上指定你github上需要部署的分支，他会自动构建并发布。</p><img src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/202405232359957.png"><p>  在 <u><a href="https://app.netlify.com/teams/lianyingzi1324/sites" target="_blank" rel="noreferrer">https://app.netlify.com/teams/lianyingzi1324/sites</a></u> 上管理自己的项目，真的太棒了🥳🎉🎉。</p><h2 id="_3-开发环境工具" tabindex="-1">3. 开发环境工具 <a class="header-anchor" href="#_3-开发环境工具" aria-label="Permalink to &quot;3. 开发环境工具&quot;">​</a></h2>`,21),f={style:{width:"320px",float:"left"}},v=s("img",{src:"https://gitee.com/zhangjunjiee/article-images/raw/master/images/202405261607705.png"},null,-1),A=s("a",{href:"https://github.com/zzzgydi/clash-verge/releases/download/v1.3.8/Clash.Verge_1.3.8_x64_portable.zip",target:"_blank"},"Clash.Verge_1.3.8_x64_portable.zip ↓",-1),j={style:{width:"320px",float:"left","margin-left":"20px","margin-bottom":"30px"}},B=s("img",{src:"https://gitee.com/zhangjunjiee/article-images/raw/master/images/202405261607705.png"},null,-1),z=s("a",{href:"https://release.piclist.cn/latest/PicList-Setup-2.8.5-x64.exe",target:"_blank"},"PicList-Setup-2.8.5-x64.exe ↓",-1),w=k('<div class="linkcard" style="clear:both;"><a href="https://vitepress.yiov.top/" target="_blank"><p class="description">Vitepress中文搭建教程<br><span>https://vitepress.yiov.top/</span></p><div class="logo"><img alt="Logo" width="70px" height="70px" src="https://gitee.com/zhangjunjiee/article-images/raw/master/images/202405051433983.jpg"></div></a></div>',1);function x(t,E,S,V,N,T){const r=c,d=a("ClientOnly"),e=a("NCard"),g=a("NolebaseGitContributors"),o=a("NolebaseGitChangelog");return h(),y("div",null,[_,i(d,null,{default:n(()=>{var l,p;return[(((l=t.$frontmatter)==null?void 0:l.aside)??!0)&&(((p=t.$frontmatter)==null?void 0:p.showArticleMetadata)??!0)?(h(),u(r,{key:0,article:t.$frontmatter},null,8,["article"])):C("",!0)]}),_:1}),b,s("div",f,[v,i(e,null,{default:n(()=>[A]),_:1})]),s("div",j,[B,i(e,null,{default:n(()=>[z]),_:1})]),w,i(g),i(o)])}const L=F(D,[["render",x]]);export{I as __pageData,L as default};
