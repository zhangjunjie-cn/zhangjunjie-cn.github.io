import{_ as p}from"./chunks/WDocTitleMeta.Dzwi0aSq.js";import{_ as l,C as d,c as h,o as r,j as a,G as c,aU as g,a as u,w as m,b as k,e as b}from"./chunks/framework.BE_xAY4I.js";import"./chunks/theme.Dysj0b24.js";const B=JSON.parse('{"title":"前端程序员搭建自己的CodeIDE（code-server教程）","description":"","frontmatter":{},"headers":[],"relativePath":"博客/2022/05前端程序员搭建自己的CodeIDE（code-server教程）.md","filePath":"博客/2022/05前端程序员搭建自己的CodeIDE（code-server教程）.md","lastUpdated":1760196138000}'),v={name:"博客/2022/05前端程序员搭建自己的CodeIDE（code-server教程）.md"};function y(s,e,f,F,C,_){const o=p,n=d("ClientOnly");return r(),h("div",null,[e[0]||(e[0]=a("h1",{id:"前端程序员搭建自己的codeide-code-server教程",tabindex:"-1"},[u("前端程序员搭建自己的CodeIDE（code-server教程） "),a("a",{class:"header-anchor",href:"#前端程序员搭建自己的codeide-code-server教程","aria-label":'Permalink to "前端程序员搭建自己的CodeIDE（code-server教程）"'},"​")],-1)),c(n,null,{default:m(()=>{var i,t;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((t=s.$frontmatter)==null?void 0:t.showWDocTitleMeta)??!0)?(r(),k(o,{key:0,article:s.$frontmatter},null,8,["article"])):b("",!0)]}),_:1}),e[1]||(e[1]=g(`<blockquote><p>偶尔不能在自己电脑上写代码时，用用浏览器敲代码也挺方便；或者用平板刷刷算法题也挺有趣；测试JavaScript某一代码片段也不用在浏览器的控制台上打印输出了；</p></blockquote><h2 id="安装code-server" tabindex="-1">安装code-server <a class="header-anchor" href="#安装code-server" aria-label="Permalink to &quot;安装code-server&quot;">​</a></h2><p>我这里使用的是ubuntu20，大家根据自己的系统下载对应的安装包即可，当然最好跟着我的教程来，这样出错了可能都是我踩过的坑，更容易解决，不然就是自己去折腾吧</p><ol><li>首先下载code-server 官方地址如下：<a href="https://github.com/coder/code-server/releases" target="_blank" rel="noreferrer">https://github.com/coder/code-server/releases</a> 我这边根据我的需求下载的是这个：</li></ol><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221029220158.png" alt="" loading="lazy"> 然后两种方式，一种是直接在服务器上下载它，不过我服务器没配vpn，所以我采取的第二种方式，本地下载然后通过某些ssh工具上传服务器即可，都是一样的，结果就是服务器上多了这样一个文件就行，用自己喜欢的方式即可。</p><p>由于买的云服务器都是我一人使用，不用特别在乎一些用户权限等等，所以接下来的操作为了方便我都是在root用户下操作的，使用的ssh工具是finalshell。</p><p>不是root的话先切换为root用户</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> su</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后上传(或直接下载)上述的<code>code-server-xxx-linux-amd64.tar.gz</code>文件</p><p>我这里放在了download文件夹下面<code>/root/download/code-server</code>根据你自己的习惯存放即可</p><p>解压：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -zxvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code-server-4.8.1-linux-amd64.tar.gz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后其实就已经可以运行了(运行的是【code-server-4.8.1-linux-amd64（解压后的文件）/bin/code-server】)</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/code-server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0.0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --auth</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> password</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>--port</code>：Code Server运行的端口，可以自己设置</p><p><code>--host 0.0.0.0</code>：允许任意IP的访问，必须加该字段，否者默认是localhost，这样你就不能在本地访问远程运行的code-server了</p><p>这里先这样，后续直接在yaml文件里配置这些就不用输入后续这些一长串的参数了</p><p>然后在浏览器中打开对应的ip:port即可</p><p>当然，如果使用的云厂商的服务记得配置放行端口，并且如果ubuntu里配置了防火墙也记得放行端口或者关闭防火墙，否者无法访问（ubuntu默认是关闭防火墙的，除非你自己之前配置过，这里就不详细介绍相关命令了，大家可以自行去搜搜相关命令）</p><h2 id="额外配置" tabindex="-1">额外配置 <a class="header-anchor" href="#额外配置" aria-label="Permalink to &quot;额外配置&quot;">​</a></h2><p>运行了上述命令之后，会生成一个默认的config.yaml文件，你可以通过运行后的输出信息得到；</p><p>修改其中的信息</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vim ~/.config/code-server/config.yaml // 一般来说都是在对应用户的这个目录下</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这是我的相关配置</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221029224316.png" alt="" loading="lazy"></p><p>这里我同时也配置了https访问，毕竟有些代码来回传输不加密可不行</p><p>简单说说证书的获取，途径很多，选择自己合适的即可，我这里使用的是阿里云的免费证书：</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221029224839.png" alt="" loading="lazy"></p><p>然后下载其中的证书后上传到服务器中对应的文件夹即可</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221029224927.png" alt="" loading="lazy"></p><p>你可以从我上面的<code>config.yaml</code>配置中看到我服务器里证书密钥的放置位置，这个完全凭喜好放置。</p><p>此时你就可以直接输入<code>./code-server</code>运行了，使用的就是config里面的默认参数了。</p><h2 id="pm2启动-域名解析" tabindex="-1">pm2启动&amp;域名解析 <a class="header-anchor" href="#pm2启动-域名解析" aria-label="Permalink to &quot;pm2启动&amp;域名解析&quot;">​</a></h2><p>然后我们将其使用pm2管理起来，或者你直接<code>nohup &lt;command&gt; &amp;</code>挂起该进程也可以。</p><p>这里简单使用pm2管理如下：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pm2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./code-server&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start_code_server.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start_code_server.sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>pm2的其他常用命令和其他操作这里就不一一介绍了<a href="https://pm2.keymetrics.io/docs/usage/quick-start/" target="_blank" rel="noreferrer">官网</a></p><p>运行后输入<code>pm2 list</code>如下</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221029225931.png" alt="" loading="lazy"></p><p>之后，你就可以在浏览器中随时访问你的codeIDE了，当然，我还解析了个子域名给ip地址，这个直接在对应的云服务厂商上操作即可（这里不详细介绍域名解析操作，自己在界面点点试试就可以了）：</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221029230302.png" alt="" loading="lazy"></p><p>然后输入ip:port或者自己的域名就可以了</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221029230553.png" alt="" loading="lazy"></p><h2 id="简单配置vscode" tabindex="-1">简单配置vscode <a class="header-anchor" href="#简单配置vscode" aria-label="Permalink to &quot;简单配置vscode&quot;">​</a></h2><p>当然，初始不是上述这个界面，还需要对vscode进行一定的配置，这个真就看大家习惯了，自己喜欢什么插件就配置什么插件就行了。</p><p>我这里暂时只安装了这些插件：</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221029231614.png" alt="" loading="lazy"></p><p>简单摘要几点：</p><p><a href="https://coder.com/docs/code-server/latest/FAQ#how-can-i-reuse-my-vs-code-configuration" target="_blank" rel="noreferrer">官方FAQ</a></p><h3 id="how-do-i-use-my-own-extensions-marketplace" tabindex="-1">How do I use my own extensions marketplace? <a class="header-anchor" href="#how-do-i-use-my-own-extensions-marketplace" aria-label="Permalink to &quot;How do I use my own extensions marketplace?&quot;">​</a></h3><p>If you own a marketplace that implements the VS Code Extension Gallery API, you can point code-server to it by setting <code>$EXTENSIONS_GALLERY</code>. This corresponds directly with the <code>extensionsGallery</code> entry in in VS Code&#39;s <code>product.json</code>.</p><p>For example, to use the legacy Coder extensions marketplace:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EXTENSIONS_GALLERY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;serviceUrl&quot;: &quot;https://extensions.coder.com/api&quot;}&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Though you can technically use Microsoft&#39;s marketplace in this manner, we strongly discourage you from doing so since this is <a href="https://coder.com/docs/code-server/latest/FAQ#why-cant-code-server-use-microsofts-extension-marketplace" target="_blank" rel="noreferrer">against their Terms of Use</a>.</p><p>For further information, see <a href="https://github.com/microsoft/vscode/issues/31168#issue-244533026" target="_blank" rel="noreferrer">this discussion</a> regarding the use of the Microsoft URLs in forks, as well as <a href="https://github.com/VSCodium/vscodium/blob/master/DOCS.md#extensions--marketplace" target="_blank" rel="noreferrer">VSCodium&#39;s docs</a>.</p><h3 id="how-can-i-reuse-my-vs-code-configuration" tabindex="-1">How can I reuse my VS Code configuration? <a class="header-anchor" href="#how-can-i-reuse-my-vs-code-configuration" aria-label="Permalink to &quot;How can I reuse my VS Code configuration?&quot;">​</a></h3><p>You can use the <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noreferrer">Settings Sync</a> extension for this purpose.</p><p>Alternatively, you can also pass <code>--user-data-dir ~/.vscode</code> or copy <code>~/.vscode</code> into <code>~/.local/share/code-server</code> to reuse your existing VS Code extensions and configuration.</p><h2 id="安装javascript版的jupyter-ijavascript" tabindex="-1">安装JavaScript版的jupyter（ijavascript） <a class="header-anchor" href="#安装javascript版的jupyter-ijavascript" aria-label="Permalink to &quot;安装JavaScript版的jupyter（ijavascript）&quot;">​</a></h2><p>为了在jupyter-notebook中使用JavaScript，需要安装对应的Node.js内核，这里我使用的是<a href="https://github.com/n-riesco/ijavascript" target="_blank" rel="noreferrer">ijavascript</a></p><p>根据官方文档安装即可，我这里使用的是ubuntu20，node16出现了一定问题，通过该issue中的回答即可解决：<a href="https://github.com/n-riesco/ijavascript/issues/270" target="_blank" rel="noreferrer">https://github.com/n-riesco/ijavascript/issues/270</a></p><p>主要就是要先安装<code>libzmq3-dev</code></p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020221029231956.png" alt="" loading="lazy"></p><p>目前我只遇到这一个问题，如果大家有其他问题，自行搜索和查看下issue中的其他回答吧</p><p>最后你应该就能得到我上述的页面了</p><p><img src="https://oss.justin3go.com/blogs/demo.gif" alt="" loading="lazy"></p><h2 id="详细视频教程" tabindex="-1">详细视频教程 <a class="header-anchor" href="#详细视频教程" aria-label="Permalink to &quot;详细视频教程&quot;">​</a></h2>`,67)),e[2]||(e[2]=a("iframe",{src:"//player.bilibili.com/player.html?aid=304716403&bvid=BV1rP411w7YZ&cid=878395274&page=1",scrolling:"no",border:"0",frameborder:"0",framespacing:"0",allowfullscreen:"true",width:"100%",height:"500px",sandbox:"allow-top-navigation allow-same-origin allow-forms allow-scripts"},null,-1))])}const j=l(v,[["render",y]]);export{B as __pageData,j as default};
