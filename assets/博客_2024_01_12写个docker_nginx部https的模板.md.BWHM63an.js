import{_ as r}from"./chunks/WDocTitleMeta.CXeNXkZ3.js";import{_ as d,C as p,c as h,o as t,j as n,G as c,aU as k,a as g,w as u,b as m,e as b}from"./chunks/framework.BAt86-JR.js";import"./chunks/theme.ClZYlGNb.js";const A=JSON.parse('{"title":"写个docker+nginx部https的模板","description":"","frontmatter":{},"headers":[],"relativePath":"博客/2024/01/12写个docker+nginx部https的模板.md","filePath":"博客/2024/01/12写个docker+nginx部https的模板.md","lastUpdated":1760196138000}'),F={name:"博客/2024/01/12写个docker+nginx部https的模板.md"};function _(s,e,y,f,E,B){const l=r,o=p("ClientOnly");return t(),h("div",null,[e[0]||(e[0]=n("h1",{id:"写个docker-nginx部https的模板",tabindex:"-1"},[g("写个docker+nginx部https的模板 "),n("a",{class:"header-anchor",href:"#写个docker-nginx部https的模板","aria-label":'Permalink to "写个docker+nginx部https的模板"'},"​")],-1)),c(o,null,{default:u(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showWDocTitleMeta)??!0)?(t(),m(l,{key:0,article:s.$frontmatter},null,8,["article"])):b("",!0)]}),_:1}),e[1]||(e[1]=k(`<p>封面：</p><p><img src="https://oss.justin3go.com/blogs/%E6%88%91%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAnginx%E9%83%A8%E7%BD%B2https%E7%9A%84%E6%95%99%E7%A8%8B%E5%8D%9A%E5%AE%A2%EF%BC%8C%E8%AF%B7%E4%B8%BA%E6%88%91%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2%E5%9B%BE_0.png" alt="" loading="lazy"></p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>有时候想部署一个给国内朋友使用的小网站，但是国内又没有像国外那些免费好用的部署平台，所以就只能自己搭建，自己搭建又每次避开不了nginx反代实现https这一步，所以就简单写了个模板以及shell脚本，方便自己每次快速部署。</p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p><a href="https://github.com/Justin3go/nginx-https-template" target="_blank" rel="noreferrer">模板地址</a>，一个基于<code>nginx + docker</code>的<code>https</code>模板，可以快速部署<code>https</code>网站🚀🚀🚀</p><blockquote><p>你至少并且也只需要拥有docker环境，<a href="https://zhuanlan.zhihu.com/p/143156163" target="_blank" rel="noreferrer"># 如何在 Ubuntu 20.04 上安装和使用 Docker</a></p></blockquote><p>基本流程：</p><p><img src="https://oss.justin3go.com/blogs/nginx_https.png" alt="" loading="lazy"></p><h2 id="使用该模板" tabindex="-1">使用该模板 <a class="header-anchor" href="#使用该模板" aria-label="Permalink to &quot;使用该模板&quot;">​</a></h2><ol><li>进入你的<code>repos</code>目录，可以为任意目录（不过后续可能要稍做修改），这里以<code>/root/repos/</code>为例，如果没有<code>repos</code>目录，可以创建一个。然后<code>clone</code>本项目</li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/repos/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Justin3go/nginx-https-template.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-https-template</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li><p>替换<code>cert/</code>下的证书为你的证书，格式为<code>your-domain.key</code>和<code>your-domain.pem</code>，比如我的域名是<code>justin3go.com</code>，那么我的证书就是<code>justin3go.com.key</code>和<code>justin3go.com.pem</code></p></li><li><p>运行脚本<code>./scripts/replace-domain.sh --domain=your-domain</code></p></li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./scripts</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置脚本权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./scripts/replace-domain.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --domain=your-domain</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 运行脚本替换域名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>注意：默认<code>https</code>转发的是<code>80</code>端口，如果你的网站不是<code>80</code>端口，需要修改<code>/conf.d/default.conf</code>中的<code>proxy_pass</code>为你的端口</p></blockquote><ol start="4"><li><p>如果在第一步中你使用的自定义目录，则修改<code>docker-compose.yml</code>中的根目录为你的目录，默认为<code>/root/repos/</code></p></li><li><p>启动容器</p></li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./scripts/run.sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><ul><li>你可以使用<code>docker ps</code>命令查看容器是否正常运行</li><li>以及使用<code>tail -n 1000 logs/access.log</code>和<code>tail -n 1000 logs/error.log</code>查看<code>nginx</code>运行日志</li></ul>`,20))])}const D=d(F,[["render",_]]);export{A as __pageData,D as default};
