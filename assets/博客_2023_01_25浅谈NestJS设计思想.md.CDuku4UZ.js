import{_ as p}from"./chunks/WDocTitleMeta.CRSTn4Ni.js";import{_ as h,C as o,c as k,o as n,j as t,G as c,aU as g,a as d,w as E,b,e as m}from"./chunks/framework.BE_xAY4I.js";import"./chunks/theme.CfUurw86.js";const B=JSON.parse('{"title":"浅谈NestJS设计思想（分层、IOC、AOP）","description":"","frontmatter":{},"headers":[],"relativePath":"博客/2023/01/25浅谈NestJS设计思想.md","filePath":"博客/2023/01/25浅谈NestJS设计思想.md","lastUpdated":1760196138000}'),u={name:"博客/2023/01/25浅谈NestJS设计思想.md"};function f(a,s,A,y,F,_){const l=p,r=o("ClientOnly");return n(),k("div",null,[s[0]||(s[0]=t("h1",{id:"浅谈nestjs设计思想-分层、ioc、aop",tabindex:"-1"},[d("浅谈NestJS设计思想（分层、IOC、AOP） "),t("a",{class:"header-anchor",href:"#浅谈nestjs设计思想-分层、ioc、aop","aria-label":'Permalink to "浅谈NestJS设计思想（分层、IOC、AOP）"'},"​")],-1)),c(r,null,{default:E(()=>{var e,i;return[(((e=a.$frontmatter)==null?void 0:e.aside)??!0)&&(((i=a.$frontmatter)==null?void 0:i.showWDocTitleMeta)??!0)?(n(),b(l,{key:0,article:a.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),s[1]||(s[1]=g(`<blockquote><p>nestJS用了有一定时间了，当初学习node后端选择的第一个web框架，这篇文章将对NestJS框架层面的几个重要概念进行梳理，希望能加深记忆，融汇贯通，更进一步，本文阅读需要对nestJS有一定使用经验。</p></blockquote><h2 id="分层" tabindex="-1">分层 <a class="header-anchor" href="#分层" aria-label="Permalink to &quot;分层&quot;">​</a></h2><p>nestJS经常被调侃为srpingJS，所以这里参考java项目的<a href="https://www.kancloud.cn/kanglin/java_developers_guide/539198" target="_blank" rel="noreferrer">阿里分层规范</a>，其架构图如下：</p><blockquote><p>图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web层，也可以直接依赖于Service层，依此类推：</p></blockquote><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020230125151727.png" alt="" loading="lazy"></p><ul><li><strong>开放接口层</strong>：可直接封装Service方法暴露成RPC接口；通过Web封装成http接口；进行网关安全控制、流量控制等。</li><li><strong>终端显示层</strong>：各个端的模板渲染并执行显示的层。当前主要是velocity渲染，JS渲染，JSP渲染，移动端展示等。</li><li><strong>Web层</strong>：主要是对访问控制进行转发，各类基本参数校验，或者<strong>不复用</strong>的业务简单处理等。</li><li><strong>Service层</strong>：相对具体的业务逻辑服务层。</li><li><strong>Manager层</strong>：通用业务处理层，它有如下特征： <ol><li>对第三方平台封装的层，预处理返回结果及转化异常信息；</li><li>对Service层通用能力的下沉，如缓存方案、中间件通用处理；</li><li>与DAO层交互，对多个DAO的组合复用。</li></ol></li><li><strong>DAO层</strong>：数据访问层，与底层MySQL、Oracle、Hbase等进行数据交互。</li><li><strong>外部接口或第三方平台</strong>：包括其它部门RPC开放接口，基础平台，其它公司的HTTP接口。</li></ul><p>不同的业务场景，不同的应用大小，程序复杂度高低，可以灵活的增删上述某些结构。无论是nest还是egg，官方demo里都没有明确提到dao层，直接在service层操作数据库了。这对于简单的业务逻辑没问题，如果业务逻辑变得复杂，service层的维护将会变得非常困难。业务一开始一般都很简单，它一定会向着复杂的方向演化，如果从长远考虑，一开始就应该保留dao层，在nestJS中并未查看到相关规定，可根据开发者场景自行考虑。如下是nestJS的分层架构图：</p><p><img src="https://oss.justin3go.com/blogs/nestjs%E5%88%86%E5%B1%82.png" alt="" loading="lazy"></p><p>对于Web层：在nestJS中，如果使用restful风格，就是controller；如果使用graphql规范，就是resolver...对于同一个业务逻辑，我们可以使用不同的接口方式暴露出去。</p><p>经常被问到和提起的问题就是<strong>为什么需要有service层</strong>：</p><ul><li>首先service作用就是在里面编写业务逻辑代码，一般来说，都是为了增加代码复用率，实现高内聚，低耦合等...</li><li>体现在这里的好处就是上述提到的同一段业务代码可以使用不同的接口方式暴露出去，或者可以在一个service内调用其他service，而非在一个接口函数里面调用另外一个内部接口，这是极其不优雅的。</li><li>当然，老生常谈的就是不同功能目的的代码分开写方便维护管理等等</li></ul><blockquote><p>有关nestJS实战入门可以参考我之前写的<a href="https://justin3go.com/%E7%9F%A5%E8%AF%86%E5%BA%93/NestJS/01controller.html" target="_blank" rel="noreferrer">这一系列文章</a>或者<a href="https://docs.nestjs.com/first-steps" target="_blank" rel="noreferrer">官方链接</a></p></blockquote><h2 id="ioc-inversion-of-control" tabindex="-1">IOC(Inversion of Control) <a class="header-anchor" href="#ioc-inversion-of-control" aria-label="Permalink to &quot;IOC(Inversion of Control)&quot;">​</a></h2><p>中文为控制反转，是<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noreferrer">面向对象程序设计</a>的一种设计原则，下面简单认识一下为什么需要IOC，IOC有什么好处，简单来说就是减少了固定性，通过外部传参进行控制内部本身固定的一些变量，如下例子：</p><p>在我们的代码中，经常会出现一个类依赖于另外一个类的情况，比如这样：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _pet</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._pet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xiaoming</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在上述例子中：</p><ul><li><code>Person</code>类固定依赖于<code>Dog</code>类，如果后续<code>Person</code>想要依赖于其他宠物类，是无法轻易修改的。</li><li>并且如果<code>Dog</code>类有所变化，比如其属性颜色染成了黑色，<code>Person</code>类也会直接受到影响。</li></ul><p>IOC的思想就是将类的依赖动态注入，以解决上述两个问题：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _pet</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._pet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xiaohei</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xiaoming</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bird</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xiaohei) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将实例化的 dog 传入 person 类</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这样，我们就实现了类的控制反转，同时，我们需要有一个容器来维护各个对象实例，当用户需要使用实例时，容器会自动将对象实例化给用户，这部分通常由框架处理，结合nestJS框架进行理解的话可以参考我之前写的这篇笔记--<a href="https://justin3go.com/%E7%9F%A5%E8%AF%86%E5%BA%93/NestJS/06%E5%8E%9F%E7%90%86%E7%BB%86%E8%8A%82.html" target="_blank" rel="noreferrer">nestJS原理细节</a>或者<a href="https://docs.nestjs.com/fundamentals/custom-providers" target="_blank" rel="noreferrer">官方文档</a></p><p>这种动态注入的思想叫做<strong>依赖注入</strong>（DI, Dependency Injection），它是 <code>IoC</code> 的一种应用形式。</p><h2 id="aop-aspect-oriented-programming" tabindex="-1">AOP(Aspect Oriented Programming) <a class="header-anchor" href="#aop-aspect-oriented-programming" aria-label="Permalink to &quot;AOP(Aspect Oriented Programming)&quot;">​</a></h2><p>中文为面向切面编程。当一个请求打过来时，一般会经过 Controller（控制器）、Service（服务）、Repository（数据库访问） 的链路。当我们不使用AOP时，需要添加一些通用逻辑时（如日志记录、权限守卫、异常处理等等），就需要在每段请求逻辑中编写相关代码。</p><p>AOP就是在所有请求外面包裹一层切面，所有请求都会经过这个切面，然后我们就可以把上述的通用逻辑放在这个结构里，如下图：</p><p><img src="https://oss.justin3go.com/blogs/AOP.png" alt="" loading="lazy"></p><p>在nestJS中实现AOP的方式有很多，比如（excepion filter、pipes、guards、interceptors），相关介绍可参考我之前的这篇笔记--<a href="https://justin3go.com/%E7%9F%A5%E8%AF%86%E5%BA%93/NestJS/08%E6%9B%B4%E5%A4%9A%E6%A8%A1%E5%9D%97.html#%E5%9F%BA%E6%9C%AC" target="_blank" rel="noreferrer">更多模块</a>或者<a href="https://docs.nestjs.com/exception-filters" target="_blank" rel="noreferrer">官方文档</a></p><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h2><p>这些思想架构都需要长期的经验体会才更深，我开发经验不足，更多是参考网上的文章和自己非常浅薄的经验进行理解，如有理解错误，欢迎友善指出...</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://docs.nestjs.com/" target="_blank" rel="noreferrer">nestJS官方文档</a></li><li><a href="https://justin3go.com/%E7%9F%A5%E8%AF%86%E5%BA%93/NestJS/06%E5%8E%9F%E7%90%86%E7%BB%86%E8%8A%82.html" target="_blank" rel="noreferrer">nestJS原理细节</a></li><li><a href="https://hentaicracker.github.io/2020/aopioc.html" target="_blank" rel="noreferrer">什么是 AOP 和 IoC</a></li><li><a href="https://juejin.cn/post/7076431946834214925#heading-8" target="_blank" rel="noreferrer">Nest.js 的 AOP 架构的好处，你感受到了么？</a></li><li><a href="https://www.zhihu.com/question/431911268" target="_blank" rel="noreferrer">java为什么要分为service层，dao层，controller层？</a></li><li><a href="https://blog.csdn.net/csh624366188/article/details/7183872" target="_blank" rel="noreferrer">mvc与三层结构终极区别</a></li><li><a href="https://segmentfault.com/a/1190000016992060" target="_blank" rel="noreferrer">nest后端开发实战（二）——分层</a></li><li><a href="https://segmentfault.com/a/1190000023740835" target="_blank" rel="noreferrer">Web开发的历史发展技术演变</a></li><li><a href="https://xie.infoq.cn/article/e50e460c9723825aea4851c06" target="_blank" rel="noreferrer">Java 项目如何分层</a></li><li><a href="https://www.kancloud.cn/kanglin/java_developers_guide/539198" target="_blank" rel="noreferrer">阿里巴巴java开发手册</a></li></ul>`,31))])}const S=h(u,[["render",f]]);export{B as __pageData,S as default};
